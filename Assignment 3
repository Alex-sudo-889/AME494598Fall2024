<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connecting DHT11 to ESP32 and Sending Data to AWS EC2</title>
    <style>
        body {
            background-color: #121212;
            color: #e0e0e0;
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
        }
        h1, h2, h3 {
            color: #ffffff;
        }
        pre, code {
            background-color: #1f1f1f;
            color: #ffffff;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
        }
        hr {
            border: 1px solid #333;
        }
        ul, ol {
            margin-left: 20px;
        }
        a {
            color: #bbbbbb;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

<h1>Connecting DHT11 to ESP32 and Sending Data to AWS EC2</h1>

<hr>

<h2>Hardware Setup</h2>
<h3>Components Needed</h3>
<ul>
    <li><strong>ESP32 Development Board</strong></li>
    <li><strong>DHT11 Sensor</strong></li>
    <li>Jumper Wires</li>
</ul>

<hr>

<h2>Programming the ESP32</h2>

<p>Install the required libraries in the Arduino IDE:</p>
<ul>
    <li><strong>DHT Sensor Library</strong> by Adafruit</li>
    <li><strong>Adafruit Unified Sensor Library</strong></li>
</ul>

<p>Follow normal procedure to upload the code from the class repository to your ESP32 board.</p>

<hr>

<h2>Setting Up AWS EC2 Server</h2>

<h3>1. Launch an EC2 Instance</h3>
<ol>
    <li>Sign in to your <a href="https://aws.amazon.com/console/">AWS Management Console</a>.</li>
    <li>Navigate to the <strong>EC2 Dashboard</strong> and click <strong>Launch Instance</strong>.</li>
    <li>Select <strong>Ubuntu Server</strong> as the AMI and choose the <strong>t2.micro</strong> instance type (free tier eligible).</li>
    <li>Complete the instance setup and launch it.</li>
</ol>

<h3>2. Setting Up Security Groups</h3>
<p>Security groups control the inbound and outbound traffic to your EC2 instance. To allow the ESP32 to communicate with your server, you need to configure your security groups:</p>
<ol>
    <li>In the EC2 dashboard, click on <strong>Security Groups</strong> in the left-hand menu.</li>
    <li>Find and select the security group associated with your instance.</li>
    <li>Under the <strong>Inbound Rules</strong> tab, click <strong>Edit Inbound Rules</strong>.</li>
    <li>Add a rule with the following settings:
        <ul>
            <li><strong>Type:</strong> Custom TCP</li>
            <li><strong>Port Range:</strong> 8080</li>
            <li><strong>Source:</strong> Anywhere (or restrict to a specific IP if needed)</li>
        </ul>
    </li>
    <li>Click <strong>Save Rules</strong> to apply the changes.</li>
</ol>

<hr>

<h3>3. Accessing the EC2 Instance via AWS SSH Web Console</h3>
<ol>
    <li>From the EC2 dashboard, click on the instance ID to view details.</li>
    <li>Select the <strong>Connect</strong> option.</li>
    <li>Choose the <strong>EC2 Instance Connect</strong> tab to SSH into the instance via the AWS web interface.</li>
</ol>

<hr>

<h2>Installing Dependencies on EC2</h2>

<p>After connecting to your EC2 instance, run the following commands to install Node.js and the http-server:</p>
<pre><code>sudo apt update

sudo apt install nodejs npm -y

npm install -g http-server
</code></pre>

<p>Create a directory for the server:</p>
<pre><code>mkdir sensor_server

cd sensor_server

http-server -p 8080
</code></pre>

<p>Your HTTP server is now running on port <strong>8080</strong>.</p>

<hr>

<h2>Testing the Setup</h2>

<ol>
    <li>Ensure the ESP32 is powered and has the correct code uploaded.</li>
    <li>Monitor the serial output on the Arduino IDE for successful connection and data transmission.</li>
    <li>Verify incoming data on the EC2 instance terminal or by opening the public IP with the correct port in your browser.</li>
</ol>

<hr>

<p><strong>Note:</strong> Ensure your AWS security group allows traffic on the correct port.</p>

</body>
</html>
